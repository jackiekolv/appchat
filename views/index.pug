doctype html
html
    head
        title Realtime Chat using Node.js and Socket.IO
        meta(name='viewport', content="initial-scale=1")
        link(rel='stylesheet', href='css/main.css')
    body
        div.box.box--container
            input.box(type="text", id="name-here", autocomplete="off", placeholder="Your name here...")
        div.box.box--container.casino_table
            div.left--game#show-card
                img.playing--card(src="PNG-cards-1.3/red_joker.png" id="card1")
                img.playing--card(src="PNG-cards-1.3/red_joker.png" id="card2")
            div.right--game
                input.com--button#send-pok(type="button" value="pok")
                input.com--button#send-hit(type="button" value="hit")
                input.com--button#send-shuffle(type="button" value="shuffle")
        div.box.box--container
            div.box.box--chat
                ul#chat-history
                form#chat-form(action="")
                    input.box(type="text", id="chat-message", autocomplete="off", placeholder="Enter message here...")
        script(src="https://cdn.socket.io/socket.io-1.3.3.js")
        script(src="https://code.jquery.com/jquery-2.1.3.min.js")
        script.
            // เอา Socket.IO มาใช้งาน
            var socket = io();

            // get element ต่างๆ มารอไว้ก่อน
            var chatForm = $('#chat-form');
            var chatHistory = $("#chat-history");
            var inputMessage = $('#chat-message');

            // set ให้ focus ที่ input ตั้งแต่เริ่ม
            inputMessage.focus();

            // สร้าง username โดยการสุ่มแบบง่ายๆ
            var username = Math.floor((Math.random() * 100) + 1);

            var isPok = false;
            var isHit = false;

            $('#name-here').on('blur', function() {
              var temp_name = username;
              username = $('#name-here').val();
              var nameChangeString = 'User ['+temp_name+'] has changed their name to ['+username+']';
              socket.emit('command',
                {
                    username: username,
                    message: nameChangeString
                }
              );
            });

            $('#send-pok').on('click', function() {
              socket.emit('command',
                {
                    username: username,
                    message: "pok"
                }
              );
            });

            $('#send-hit').on('click', function() {
              socket.emit('command',
                {
                    username: username,
                    message: "hit"
                }
              );
            });

            $('#send-shuffle').on('click', function() {
              socket.emit('command',
                {
                    username: username,
                    message: "shuffle"
                }
              );
            });

            // เมื่อเชื่อมต่อสำเร็จ ให้ส่งข้อความไปบอก server
            socket.emit('chat', {
                username: username,
                message: 'I\'m connected.'
            });

            // เมื่อ submit form ให้ทำอะไร?
            chatForm.submit(function() {
                // ส่งทั้ง username และ ข้อความไปให้ server
                socket.emit('chat',
                  {
                      username: username,
                      message: inputMessage.val()
                	}
                );

              	// clear ค่า input
                $(this)[0].reset();
                return false;
            });

            // เมื่อได้รับข้อมูลจาก server ให้ทำอะไร?
            socket.on('chat', function(data) {
                if (data.username == username) {
                    // ถ้าเราเป็นคนส่งเอง ให้พ่น li.message.message--me
                    chatHistory.append($('<li class="message message--me">').text(data.message + ' @'+getTime()));
              	} else {
              	    // แต่ถ้าเป็นคนอื่นส่ง ให้พ่น li.message เฉยๆ
                    chatHistory.append($('<li class="message">').text(data.username + ': ' + data.message + ' @'+getTime()));
              	}
              	// เมื่อพ่นข้อความแล้ว ก็ให้เลื่อนหน้าจอไปที่ข้อความล่าสุดด้วย
                chatHistory[0].scrollTop = chatHistory[0].scrollHeight;
            });

            socket.on('cards', function(data){
                if(!isPok){
                    $("#card3").remove();
                    $("#card1").attr("src","PNG-cards-1.3/"+data.message[0]);
                    $("#card2").attr("src","PNG-cards-1.3/"+data.message[1]);
                    isPok = true;
                }
            });

            socket.on('card3', function(data){
                if(!isHit&&isPok){
                    $("#card3").remove();
                    $("#show-card").append("<img src='PNG-cards-1.3/"+data.message+"' class='playing--card' id='card3'>");
                    isHit = true;
                }
            });

            socket.on('shuffle', function(data){
                $("#card3").remove();
                $("#card1").attr("src","PNG-cards-1.3/red_joker.png");
                $("#card2").attr("src","PNG-cards-1.3/red_joker.png");
                isPok = false;
                isHit = false;
            });

            function getTime() {
                var date = new Date();
                var hour = date.getHours();
                hour = (hour < 10 ? "0" : "") + hour;
                var min  = date.getMinutes();
                min = (min < 10 ? "0" : "") + min;
                var sec  = date.getSeconds();
                sec = (sec < 10 ? "0" : "") + sec;
                return hour + ":" + min + ":" + sec;
            }
